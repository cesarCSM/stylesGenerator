class colorPicker extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const o="#h1"===this.shadowRoot.host.parentNode.getAttribute("aria-label");this.shadowRoot.innerHTML=`${colorCompStyles.join("")}\n    <div id="TextColor" class="colorComp">\n      <label>Text color:</label>\n      <button id="colorPicker" class="fullWidthBtn Content" onclick="toggleClass(this)"></button>\n      <div id="colorsDiv" class="${o?"firstC":""}">\n        <label>Text color:</label>\n        ${renderColors()}\n        <div>\n          <h4>Other color</h4>\n          <input id="colorPickerInput" type="color" value="#ffffff" />\n        </div>\n      </div>\n    </div>`,this.shadowRoot.querySelector("#colorPickerInput").addEventListener("input",(function(){applyColor(this.value.substring(1),this)}))}}function renderColors(){let o=[],t=[];return Object.entries(localTheme.palettes).forEach((([e,l])=>{t=[],Object.entries(l).forEach((([o,e])=>{t.push(`<button onclick="applyColor('${e}', this)" style="background-color: #${e}"></button>`)})),t=t.join(""),o.push(`<div><h4>${paletteTitles[e]}</h4><span>${t}</span></div>`)})),o=o.join(""),o}customElements.define("color-picker",colorPicker);