class FontPicker extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot.innerHTML=`${fontsCompStyles.join("")}\n    <article id="font-main">\n      <h4>${fontTitles[this.getAttribute("value")]}</h4>\n      <div class="fontSelector">\n        ${addButton(this.getAttribute("value"))}\n        <div class="List" id="List">\n          <div id="Btns" class="Btns">${fontPickerList}</div>\n          ${fontsCompImgs.join("")}\n        </div>\n      </div>\n    </article>`;const t=this.shadowRoot.querySelector("article").getBoundingClientRect();window.innerHeight-t.top<350&&this.shadowRoot.querySelector("#List").classList.add("Upward")}}function getFont(t,e){let o=localTheme;const n=e.getRootNode().querySelector("#Picker");n.style.fontFamily=`"${FONTS[t].family}", sans-serif`,n.innerHTML=FONTS[t].family,o.fonts[e.getRootNode().host.getAttribute("value")].family=t,importFonts(),n.classList.remove("Active"),updateStorage(o)}function addButton(t){const e="number"==typeof localTheme.fonts[t].family;return`<button class="fontsPicker" id="Picker" onclick="toggleClass(this)" style="font-family:${e?FONTS[localTheme.fonts[t].family].family+",":""} sans-serif">${e?FONTS[localTheme.fonts[t].family].family:"Pick a Font"}</button>`}customElements.define("font-picker",FontPicker);